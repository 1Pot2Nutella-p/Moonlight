@page "/admin/websites/new"

@using Blazored.Typeahead
@using Logging.Net
@using Moonlight.App.Database.Entities
@using Moonlight.App.Repositories
@using Moonlight.App.Services
@using Moonlight.App.Services.Interop

@inject UserRepository UserRepository
@inject PleskServerRepository PleskServerRepository
@inject SmartTranslateService SmartTranslateService
@inject WebsiteService WebsiteService
@inject NavigationManager NavigationManager
@inject ToastService ToastService

<OnlyAdmin>
    <div class="d-flex flex-center">
        <LazyLoader Load="Load">
            <div class="card rounded-3 w-md-550px">
                <div class="card-body">
                    <div class="d-flex flex-center flex-column-fluid">
                        <div class="form w-100 fv-plugins-bootstrap5 fv-plugins-framework">
                            <div class="fv-row mb-8">
                                <label class="form-label">
                                    <TL>Base domain</TL>
                                </label>
                                <input @bind="BaseDomain" type="text" class="form-control"/>
                            </div>
                            <div class="fv-row mb-8">
                                <label class="form-label">
                                    <TL>Ftp password</TL>
                                </label>
                                <input @bind="FtpPassword" type="text" class="form-control"/>
                            </div>
                            <div class="fv-row mb-8">
                                <div class="form-select">
                                    <BlazoredTypeahead SearchMethod="SearchUsers"
                                                       @bind-Value="User">
                                        <SelectedTemplate>
                                            @(context.Email)
                                        </SelectedTemplate>
                                        <ResultTemplate>
                                            @(context.Email)
                                        </ResultTemplate>
                                    </BlazoredTypeahead>
                                </div>
                            </div>
                            <div class="fv-row mb-8">
                                <label class="form-label">
                                    <TL>Plesk server</TL>
                                </label>
                                <WSelect TItem="PleskServer"
                                         Items="PleskServers"
                                         DisplayField="@(x => x.Name)"
                                         OnChange="@(x => PleskServer = x)">
                                </WSelect>
                            </div>
                            <div class="fv-row mb-9">
                                <WButton Text="@(SmartTranslateService.Translate("Create"))"
                                         WorkingText="@(SmartTranslateService.Translate("Creating"))"
                                         CssClasses="btn-success"
                                         OnClick="Create">
                                </WButton>
                                <a href="/admin/websites/servers" class="btn btn-primary">
                                    <TL>Back</TL>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </LazyLoader>
    </div>
</OnlyAdmin>

@code
{
    // Cached data
    private User[] Users;
    private PleskServer[] PleskServers;

    private User User;
    private PleskServer? PleskServer;
    private string BaseDomain = "";
    private string FtpPassword = "";

    private Task Load(LazyLoader lazyLoader)
    {
        Users = UserRepository
            .Get()
            .ToArray();

        User = Users.First();

        PleskServers = PleskServerRepository
            .Get()
            .ToArray();

        return Task.CompletedTask;
    }

    private Task<IEnumerable<User>> SearchUsers(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return Task.FromResult(Array.Empty<User>().Cast<User>());
        }
        else
        {
            return Task.FromResult(Users.Where(x => x.Email.ToLower().StartsWith(input)));
        }
    }

    private async Task Create()
    {
        await WebsiteService.Create(User, BaseDomain, FtpPassword, PleskServer);

        await ToastService.Success(SmartTranslateService.Translate("Website successfully created"));
        NavigationManager.NavigateTo("/admin/websites");
    }
}