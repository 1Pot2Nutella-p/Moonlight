@page "/admin/websites/new"

@using Moonlight.App.Models.Forms
@using Moonlight.App.Services
@using Blazored.Typeahead
@using Moonlight.App.Database.Entities
@using Moonlight.App.Repositories

@inject WebsiteService WebsiteService
@inject UserRepository UserRepository
@inject NavigationManager NavigationManager

<OnlyAdmin>
    <div class="card card-body p-10">
        <LazyLoader Load="Load">
            <SmartForm Model="Model" OnValidSubmit="OnValidSubmit">
                <label class="form-label">
                    <TL>Base domain</TL>
                </label>
                <div class="input-group mb-5">
                    <InputText @bind-Value="Model.BaseDomain" class="form-control"></InputText>
                </div>
                <label class="form-label">
                    <TL>Owner</TL>
                </label>
                <div class="input-group mb-5">
                    <BlazoredTypeahead SearchMethod="SearchUsers"
                                       @bind-Value="Model.User">
                        <SelectedTemplate>
                            @(context.Email)
                        </SelectedTemplate>
                        <ResultTemplate>
                            @(context.Email)
                        </ResultTemplate>
                    </BlazoredTypeahead>
                </div>
                <div>
                    <button type="submit" class="btn btn-primary float-end">
                        <TL>Create</TL>
                    </button>
                </div>
            </SmartForm>
        </LazyLoader>
    </div>
</OnlyAdmin>

@code
{
    private WebsiteAdminDataModel Model = new();
    private User[] Users;

    private async Task OnValidSubmit()
    {
        await WebsiteService.Create(Model.BaseDomain, Model.User);
        
        NavigationManager.NavigateTo("/admin/websites");
    }

    private Task Load(LazyLoader arg)
    {
        Users = UserRepository
            .Get()
            .ToArray();

        return Task.CompletedTask;
    }

    private Task<IEnumerable<User>> SearchUsers(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return Task.FromResult(Array.Empty<User>().Cast<User>());
        }
        else
        {
            return Task.FromResult(Users.Where(x => x.Email.ToLower().StartsWith(input)));
        }
    }
}