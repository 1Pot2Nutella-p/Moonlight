@page "/admin/tickets/view/{Id:int}"
@using Moonlight.App.Database.Entities
@using Moonlight.App.Events
@using Moonlight.App.Repositories
@using Moonlight.App.Services
@using Moonlight.App.Services.Files
@using Moonlight.App.Services.Tickets
@using Microsoft.EntityFrameworkCore
@using System.Text.RegularExpressions
@using Moonlight.App.Helpers

@inject TicketServerService TicketServerService
@inject TicketClientService TicketClientService
@inject SmartTranslateService SmartTranslateService
@inject Repository<SupportTicket> SupportTicket
@inject ResourceService ResourceService
@inject EventSystem Event

<OnlyAdmin>
    <div class="card  py-3 py-lg-6">
        <div class="app-container  container-xxl d-flex flex-stack">
            <div class="page-title d-flex flex-column justify-content-center flex-wrap me-3">
                <h1 class="page-heading d-flex text-dark fw-bold fs-3 flex-column justify-content-center my-0">
                    <TL>Tickets</TL>
                </h1>
            </div>
        </div>
    </div>

    <div class="d-flex">
        <div class="flex-lg-row-fluid ms-lg-7 ms-xl-10">
            <div class="card">
                <LazyLoader Load="LoadTicket" @ref="TicketLazyLoader">
                    @if (Ticket != null)
                    {
                        <div class="card-header">
                            <div class="card-title">
                                <div class="d-flex justify-content-center flex-column me-3">
                                    <a class="fs-4 fw-bold text-gray-900 text-hover-primary me-1 mb-2 lh-1">@Ticket.Title</a>
        
                                    <div class="mb-0 lh-1">
                                        <span class="badge badge-success badge-circle w-10px h-10px me-1"></span>
        
                                        <span class="fs-7 fw-semibold text-muted">Active</span>
                                    </div>
                                    
                                    
                                </div>
                            </div>
                        </div>
                        
                        <div class="card-body">
                            <div class="scroll-y me-n5 pe-5 h-300px h-lg-auto" data-kt-element="messages" data-kt-scroll="true" data-kt-scroll-activate="{default: false, lg: true}" data-kt-scroll-max-height="auto" data-kt-scroll-dependencies="#kt_header, #kt_app_header, #kt_app_toolbar, #kt_toolbar, #kt_footer, #kt_app_footer, #kt_chat_messenger_header, #kt_chat_messenger_footer" data-kt-scroll-wrappers="#kt_content, #kt_app_content, #kt_chat_messenger_body" data-kt-scroll-offset="5px" style="max-height: 465px;">
                                <LazyLoader Load="LoadTicket" @ref="TicketLazyLoader">
                                    @foreach (var message in Ticket.Messages)
                                    {
                                        if (message.User.Id == User.Id)
                                        {
                                            <div class="d-flex justify-content-end mb-10">
                                                <div class="d-flex flex-column align-items-end">
                                                    <div class="d-flex align-items-center mb-2">
                                                        <div class="me-3">
                                                            <span class="text-muted fs-7 mb-1">@(Formatter.FormatAgoFromDateTime(message.CreatedAt))</span>
                                                            <a class="fs-5 fw-bold text-gray-900 text-hover-primary ms-1">@(message.User.FirstName + " " + message.User.LastName)</a>
                                                        </div>
                                                        <div class="symbol  symbol-35px symbol-circle ">
                                                            <img alt="Avatar" src="@ResourceService.Avatar(message.User)">
                                                        </div>
                                                    </div>
                                                    <div class="p-5 rounded bg-light-primary text-dark fw-semibold mw-lg-400px text-end">
                                                        @{
                                                            int i = 0;
                                                            var arr = message.Message.Split("\n", StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
                                                        }
                                                        @foreach (var line in arr)
                                                        {
                                                            @line
                                                            if (i++ != arr.Length - 1)
                                                            {
                                                                <br/>
                                                            }
                                                        }
        
                                                        @if (message.Attachment != "")
                                                        {
                                                            <div class="mt-3">
                                                                @if (Regex.IsMatch(message.Attachment, @"\.(jpg|jpeg|png|gif|bmp)$"))
                                                                {
                                                                    <img src="@(ResourceService.BucketItem("supportTicket", message.Attachment))" class="img-fluid" alt="Attachment"/>
                                                                }
                                                                else
                                                                {
                                                                    <a class="btn btn-secondary" href="@(ResourceService.BucketItem("supportTicket", message.Attachment))">
                                                                        <i class="me-2 bx bx-download"></i> @(message.Attachment)
                                                                    </a>
                                                                }
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="d-flex justify-content-start mb-10 ">
                                                <div class="d-flex flex-column align-items-start">
                                                    <div class="d-flex align-items-center mb-2">
                                                        <div class="symbol  symbol-35px symbol-circle ">
                                                            <img alt="Avatar" src="@ResourceService.Avatar(message.User)">
                                                        </div>
                                                        <div class="ms-3">
                                                            <a class="fs-5 fw-bold text-gray-900 text-hover-primary me-1">@(Formatter.FormatAgoFromDateTime(message.CreatedAt))</a>
                                                            <span class="text-muted fs-7 mb-1">@(message.User.FirstName + " " + message.User.LastName)</span>
                                                        </div>
                                                    </div>
                                                    <div class="p-5 rounded bg-light-info text-dark fw-semibold mw-lg-400px text-start">
                                                        @{
                                                            int i = 0;
                                                            var arr = message.Message.Split("\n", StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
                                                        }
        
                                                        @foreach (var line in arr)
                                                        {
                                                            @line
                                                            if (i++ != arr.Length - 1)
                                                            {
                                                                <br/>
                                                            }
                                                        }
        
                                                        @if (message.Attachment != "")
                                                        {
                                                            <div class="mt-3">
                                                                @if (Regex.IsMatch(message.Attachment, @"\.(jpg|jpeg|png|gif|bmp)$"))
                                                                {
                                                                    <img src="@(ResourceService.BucketItem("supportTicket", message.Attachment))" class="img-fluid" alt="Attachment"/>
                                                                }
                                                                else
                                                                {
                                                                    <a class="btn btn-secondary" href="@(ResourceService.BucketItem("supportTicket", message.Attachment))">
                                                                        <i class="me-2 bx bx-download"></i> @(message.Attachment)
                                                                    </a>
                                                                }
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }
                                </LazyLoader>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="card-header">
                            <div class="card-title">
                                <div class="d-flex justify-content-center flex-column me-3">
                                    <a class="fs-4 fw-bold text-gray-900 text-hover-primary me-1 mb-2 lh-1">
                                        <TL>No Ticket Found!</TL>
                                    </a>
                                </div>
                            </div>
                        </div>
                    }
                </LazyLoader>
    
                <div class="card-footer">
                    <div class="d-flex flex-stack">
                        <table class="w-100">
                            <tr>
                                <td class="align-top">
                                    <SmartFileSelect @ref="SmartFileSelect"></SmartFileSelect>
                                </td>
                                <td class="w-100">
                                    <textarea @bind="Content" @oninput="OnTyping" class="form-control mb-3 form-control-flush" rows="1" placeholder="Type a message">            
                                    </textarea>
                                </td>
                                <td class="align-top">
                                    <WButton Text="@(SmartTranslateService.Translate("Send"))"
                                             WorkingText="@(SmartTranslateService.Translate("Sending"))"
                                             CssClasses="btn-primary ms-2"
                                             OnClick="Send">
                                    </WButton>
                                </td>
                            </tr>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</OnlyAdmin>

@code
{
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    public User User { get; set; }

    private string Content = "";
    private SmartFileSelect SmartFileSelect;

    private SupportTicket? Ticket;
    private DateTime LastTypingTimestamp = DateTime.UtcNow.AddMinutes(-10);

    private LazyLoader? TicketLazyLoader;
    private LazyLoader? MessagesLazyLoader;

    protected override async Task OnInitializedAsync()
    {
        /*
        await Event.On<User>($"SupportTicket.ticket.{Id}", this, async user =>
        {
            
        });
        */
    }

    protected override async Task OnParametersSetAsync()
    {
        if (TicketLazyLoader != null && MessagesLazyLoader != null)
        {
            await TicketLazyLoader.Reload();
            await MessagesLazyLoader.Reload();
        }
    }
    
    private async Task LoadTicket(LazyLoader arg)
    {
        Ticket = SupportTicket.Get()
            .Include(x => x.Messages)
            .Include(x => x.Owner)
            .FirstOrDefault(x => x.Id == Id);
    }

    private async Task Send()
    {
        var ticketResult = await TicketServerService.CreateTicketMessage(User, Content, Ticket, SmartFileSelect.SelectedFile);
        if (ticketResult != Ticket)
        {
            Ticket = Ticket = SupportTicket.Get()
                .Include(x => x.Messages)
                .Include(x => x.Owner)
                .FirstOrDefault(x => x.Id == Id);
            
            Content = "";
            await InvokeAsync(StateHasChanged);
            await SmartFileSelect.RemoveSelection();
            if (MessagesLazyLoader != null) await MessagesLazyLoader.Reload();
        }
    }
    
    
    private async void OnTyping()
    {
        if ((DateTime.UtcNow - LastTypingTimestamp).TotalSeconds > 5)
        {
            LastTypingTimestamp = DateTime.UtcNow;
            //await ClientService.SendTyping();
        }
    }
    
    public async void Dispose()
    {
        await Event.Off($"SupportTicket.ticket.{Id}", this);
    }
}