@page "/admin/nodes"
@using Moonlight.App.Repositories
@using Moonlight.App.Database.Entities
@using Moonlight.App.Helpers
@using Moonlight.App.Models.Node
@using Moonlight.App.Models.Wings.Resources
@using Moonlight.App.Services
@using Moonlight.App.Services.Interop
@using Logging.Net

@inject NodeRepository NodeRepository
@inject AlertService AlertService
@inject NodeService NodeService
@inject SmartTranslateService SmartTranslateService

<OnlyAdmin>
    <div class="row mb-5">
        <div class="card card-body">
            <a class="btn btn-primary" href="/admin/nodes/new">
                <TL>Add a new node</TL>
            </a>
        </div>
    </div>
    <div class="row">
        <LazyLoader @ref="LazyLoader" Load="Load">
            @if (!Nodes.Any())
            {
                <div class="card card-body">
                    <div class="alert alert-info">
                        <TL>No nodes found. Start with adding a new node</TL>
                    </div>
                </div>
            }
            else
            {
                foreach (var node in Nodes)
                {
                    <div class="col-xl-6 mb-xl-10">
                        <div class="card card-flush h-xl-100">
                            <div class="card-header pt-5">
                                <h4 class="card-title d-flex align-items-start flex-column">
                                    <span class="card-label fw-bold text-gray-800">@(node.Name) - (ID: @(node.Id))</span>
                                </h4>
                            </div>
                            <div class="card-body pt-6">
                                <div class="d-flex flex-stack">
                                    <div class="d-flex align-items-center me-3">
                                        <div class="flex-grow-1">
                                            <span class="text-gray-800 fs-5 fw-bold lh-0">
                                                <TL>Status</TL>
                                            </span>
                                        </div>
                                    </div>
                                    <div class="d-flex align-items-center w-100 mw-125px">
                                        <span class="text-white-400 fw-semibold">
                                            @{
                                                var ss = StatusCache.ContainsKey(node) ? StatusCache[node] : null;
                                            }

                                            @if (ss == null)
                                            {
                                                <span class="text-danger">Offline</span>
                                            }
                                            else
                                            {
                                                <span class="text-success">Online (@(ss.Version))</span>
                                            }
                                        </span>
                                    </div>
                                </div>
                                <div class="separator separator-dashed my-3"></div>
                                <div class="d-flex flex-stack">
                                    <div class="d-flex align-items-center me-3">
                                        <div class="flex-grow-1">
                                            <span class="text-gray-800 fs-5 fw-bold lh-0">
                                                <TL>CPU Usage</TL>
                                            </span>
                                            <span class="text-gray-400 fw-semibold d-block fs-6">
                                                <TL>In %</TL>
                                            </span>
                                        </div>
                                    </div>
                                    <div class="d-flex align-items-center w-100 mw-125px">
                                        <span class="text-white-400 fw-semibold">
                                            @{
                                                var cpu = CpuCache.ContainsKey(node) ? CpuCache[node] : null;
                                            }

                                            @if (cpu == null)
                                            {
                                                <span>Loading</span>
                                            }
                                            else
                                            {
                                                <span>@(cpu.CpuUsage)%</span>
                                            }
                                        </span>
                                    </div>
                                </div>
                                <div class="separator separator-dashed my-3"></div>
                                <div class="d-flex flex-stack">
                                    <div class="d-flex align-items-center me-3">
                                        <div class="flex-grow-1">
                                            <span class="text-gray-800 fs-5 fw-bold lh-0">
                                                <TL>Memory</TL>
                                            </span>
                                            <span class="text-gray-400 fw-semibold d-block fs-6">
                                                <TL>Used / Available memory</TL>
                                            </span>
                                        </div>
                                    </div>
                                    <div class="d-flex align-items-center w-100 mw-125px">
                                        <span class="text-white-400 fw-semibold">
                                            @{
                                                var memory = MemoryCache.ContainsKey(node) ? MemoryCache[node] : null;
                                            }

                                            @if (memory == null)
                                            {
                                                <span>Loading</span>
                                            }
                                            else
                                            {
                                                <span>@(Formatter.FormatSize(memory.Total - memory.Free)) / @(Formatter.FormatSize(memory.Total))</span>
                                            }
                                        </span>
                                    </div>
                                </div>
                                <div class="separator separator-dashed my-3"></div>
                                <div class="d-flex flex-stack">
                                    <div class="d-flex align-items-center me-3">
                                        <div class="flex-grow-1">
                                            <span class="text-gray-800 fs-5 fw-bold lh-0">
                                                <TL>Storage</TL>
                                            </span>
                                            <span class="text-gray-400 fw-semibold d-block fs-6">
                                                <TL>Available storage</TL>
                                            </span>
                                        </div>
                                    </div>
                                    <div class="d-flex align-items-center w-100 mw-125px">
                                        <span class="text-white-400 fw-semibold">
                                            @{
                                                var disk = DiskCache.ContainsKey(node) ? DiskCache[node] : null;
                                            }

                                            @if (disk == null)
                                            {
                                                <span>Loading</span>
                                            }
                                            else
                                            {
                                                <span>@(Formatter.FormatSize(disk.FreeBytes))</span>
                                            }
                                        </span>
                                    </div>
                                </div>
                                <div class="separator my-5"></div>
                                <div class="d-flex flex-stack">
                                    <div class="align-items-start">
                                        <a class="btn btn-primary" href="/admin/nodes/edit/@(node.Id)">
                                            <TL>Edit</TL>
                                        </a>
                                        <a class="btn btn-success" href="/admin/nodes/setup/@(node.Id)">
                                            <TL>Setup</TL>
                                        </a>
                                        <WButton Text="@(SmartTranslateService.Translate("Delete"))"
                                                 WorkingText="@(SmartTranslateService.Translate("Deleting"))"
                                                 CssClasses="btn-danger"
                                                 OnClick="() => Delete(node)">
                                        </WButton>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </LazyLoader>
    </div>
</OnlyAdmin>

@code
{
    private Node[] Nodes;

    private LazyLoader LazyLoader;

    private Dictionary<Node, CpuStats> CpuCache = new();
    private Dictionary<Node, MemoryStats> MemoryCache = new();
    private Dictionary<Node, DiskStats> DiskCache = new();
    private Dictionary<Node, SystemStatus?> StatusCache = new();

    private Task Load(LazyLoader lazyLoader)
    {
        CpuCache.Clear();
        MemoryCache.Clear();
        DiskCache.Clear();

        lock (StatusCache)
        {
            StatusCache.Clear();
        }

        Nodes = NodeRepository.Get().ToArray();

        Task.Run(() =>
        {
            foreach (var node in Nodes)
            {
                Task.Run(async () =>
                {
                    try
                    {
                        var ss = await NodeService.GetStatus(node);

                        lock (StatusCache)
                        {
                            StatusCache.Add(node, ss);
                        }
                    }
                    catch (Exception e)
                    {
                        Logger.Debug(e.Message);

                        lock (StatusCache)
                        {
                            StatusCache.Add(node, null);
                        }
                    }

                    await InvokeAsync(StateHasChanged);
                });
            }
        });

        return Task.CompletedTask;
    }

    private async Task Delete(Node node)
    {
        var b = await AlertService.YesNo(
            SmartTranslateService.Translate("Delete this node?"),
            SmartTranslateService.Translate("Do you really want to delete this node"),
            SmartTranslateService.Translate("Yes"),
            SmartTranslateService.Translate("No")
            );

        if (b)
        {
            if (node.Allocations.Any())
                await AlertService.Error(
                    SmartTranslateService.Translate("Error"),
                    SmartTranslateService.Translate("Delete all allocations before deleting the node")
                    );
            else
            {
                NodeRepository.Delete(node);
                await LazyLoader.Reload();
            }
        }
    }
}